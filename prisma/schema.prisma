generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Root {
  id        Int      @id @default(autoincrement())
  fullname  String   
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Admin {
  id         Int      @id @default(autoincrement())
  fullname   String   
  username   String   @unique
  password   String
  birthDate  DateTime 
  phone      String   
  tgUsername String   
  isActive   Boolean  @default(true)
  isDeleted  Boolean? @default(false)
  createdAt  DateTime @default(now())
}

model Teacher {
  id             Int      @id @default(autoincrement())
  fullname       String   
  username       String   @unique
  password       String
  birthDate      DateTime 
  phone          String   
  tgUsername     String  
  degrees        Degree[]
  teacherCourses Course[]
  substituteTeachers SubstituteTeacher[]
  gender         Gender   @default(MALE)
  profilePicture String?
  isDeleted      Boolean? @default(false)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
}

model Degree {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  teachers  Teacher[]
  courses   Course[]
  createdAt DateTime @default(now())
}

model Student {
  id             Int       @id @default(autoincrement())
  fullname       String   
  username       String    @unique
  password       String
  birthDate      DateTime 
  phone          String?   
  tgUsername     String  
  gender         Gender    @default(MALE)
  courses        CourseStudent[]
  profilePicture String?
  isActive       Boolean   @default(true)
  isDeleted      Boolean?  @default(false)
  createdAt      DateTime  @default(now())
}

enum Gender {
  MALE
  FEMALE
  CHILD
}

model Course{
  id        Int      @id @default(autoincrement())
  name      String   @unique
  description String?
  daysOfWeek DaysOfWeek[]
  gender Gender
  startAt DateTime
  endAt DateTime?
  startTime DateTime
  endTime DateTime
  students  CourseStudent[]
  teacher     Teacher        @relation(fields: [teacherId], references: [id])
  teacherId   Int
  substituteTeacher SubstituteTeacher[]
  degrees   Degree[]
  createdAt DateTime  @default(now())
}

model SubstituteTeacher {
  id         Int      @id @default(autoincrement())
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  teacher    Teacher  @relation(fields: [teacherId], references: [id])
  teacherId  Int
  startDate  DateTime // qachondan
  endDate    DateTime // qachongacha
  reason     String?  // istasa sabab: "asosiy oâ€˜qituvchi ta'tilda"
  createdAt  DateTime @default(now())
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model CourseStudent {
  id        Int      @id @default(autoincrement())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  feeChanges FeeChanges[]
  joinedAt DateTime @default(now())
  monthlyPayment Int
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
}

model FeeChanges {
  id        Int      @id @default(autoincrement())
  courseStudentId Int
  CourseStudent CourseStudent @relation(fields: [courseStudentId], references: [id])
  date DateTime
  newFee Int
}



